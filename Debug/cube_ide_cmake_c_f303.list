
cube_ide_cmake_c_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001928  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001ab0  08001ab0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001ab0  08001ab0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ab0  08001ab0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ab0  08001ab0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ab0  08001ab0  00011ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ab4  08001ab4  00011ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005ce7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6c  00000000  00000000  00025d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  00027790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000006f8  00000000  00000000  00027f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9f0  00000000  00000000  00028678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008da5  00000000  00000000  00047068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3d9d  00000000  00000000  0004fe0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103baa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e44  00000000  00000000  00103bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a98 	.word	0x08001a98

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a98 	.word	0x08001a98

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	695a      	ldr	r2, [r3, #20]
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	695a      	ldr	r2, [r3, #20]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b085      	sub	sp, #20
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000202:	4a13      	ldr	r2, [pc, #76]	; (8000250 <LL_SYSCFG_SetEXTISource+0x58>)
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	3302      	adds	r3, #2
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	43db      	mvns	r3, r3
 8000214:	ea02 0103 	and.w	r1, r2, r3
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	0c1b      	lsrs	r3, r3, #16
 800021c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	fa93 f3a3 	rbit	r3, r3
 8000224:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	fab3 f383 	clz	r3, r3
 800022c:	b2db      	uxtb	r3, r3
 800022e:	461a      	mov	r2, r3
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	fa03 f202 	lsl.w	r2, r3, r2
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <LL_SYSCFG_SetEXTISource+0x58>)
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	430a      	orrs	r2, r1
 800023e:	3302      	adds	r3, #2
 8000240:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000244:	bf00      	nop
 8000246:	3714      	adds	r7, #20
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40010000 	.word	0x40010000

08000254 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000254:	b480      	push	{r7}
 8000256:	b089      	sub	sp, #36	; 0x24
 8000258:	af00      	add	r7, sp, #0
 800025a:	60f8      	str	r0, [r7, #12]
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000268:	697b      	ldr	r3, [r7, #20]
 800026a:	fa93 f3a3 	rbit	r3, r3
 800026e:	613b      	str	r3, [r7, #16]
  return result;
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	fab3 f383 	clz	r3, r3
 8000276:	b2db      	uxtb	r3, r3
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	2103      	movs	r1, #3
 800027c:	fa01 f303 	lsl.w	r3, r1, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	401a      	ands	r2, r3
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	fa93 f3a3 	rbit	r3, r3
 800028e:	61bb      	str	r3, [r7, #24]
  return result;
 8000290:	69bb      	ldr	r3, [r7, #24]
 8000292:	fab3 f383 	clz	r3, r3
 8000296:	b2db      	uxtb	r3, r3
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	431a      	orrs	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3724      	adds	r7, #36	; 0x24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002b2:	b480      	push	{r7}
 80002b4:	b089      	sub	sp, #36	; 0x24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	68da      	ldr	r2, [r3, #12]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	fa93 f3a3 	rbit	r3, r3
 80002cc:	613b      	str	r3, [r7, #16]
  return result;
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	fab3 f383 	clz	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	2103      	movs	r1, #3
 80002da:	fa01 f303 	lsl.w	r3, r1, r3
 80002de:	43db      	mvns	r3, r3
 80002e0:	401a      	ands	r2, r3
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	fa93 f3a3 	rbit	r3, r3
 80002ec:	61bb      	str	r3, [r7, #24]
  return result;
 80002ee:	69bb      	ldr	r3, [r7, #24]
 80002f0:	fab3 f383 	clz	r3, r3
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	6879      	ldr	r1, [r7, #4]
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	60da      	str	r2, [r3, #12]
}
 8000304:	bf00      	nop
 8000306:	3724      	adds	r7, #36	; 0x24
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	683a      	ldr	r2, [r7, #0]
 800031e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000320:	bf00      	nop
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08a      	sub	sp, #40	; 0x28
 8000330:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000332:	f107 031c 	add.w	r3, r7, #28
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	609a      	str	r2, [r3, #8]
 8000348:	60da      	str	r2, [r3, #12]
 800034a:	611a      	str	r2, [r3, #16]
 800034c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800034e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000352:	f7ff ff39 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000356:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800035a:	f7ff ff35 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800035e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000362:	f7ff ff31 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000366:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800036a:	f7ff ff2d 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800036e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000372:	f7ff ff29 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000376:	f64f 7108 	movw	r1, #65288	; 0xff08
 800037a:	4863      	ldr	r0, [pc, #396]	; (8000508 <MX_GPIO_Init+0x1dc>)
 800037c:	f7ff ffc8 	bl	8000310 <LL_GPIO_ResetOutputPin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin);

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE2);
 8000380:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000384:	2004      	movs	r0, #4
 8000386:	f7ff ff37 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE4);
 800038a:	4960      	ldr	r1, [pc, #384]	; (800050c <MX_GPIO_Init+0x1e0>)
 800038c:	2004      	movs	r0, #4
 800038e:	f7ff ff33 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 8000392:	495f      	ldr	r1, [pc, #380]	; (8000510 <MX_GPIO_Init+0x1e4>)
 8000394:	2004      	movs	r0, #4
 8000396:	f7ff ff2f 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE0);
 800039a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800039e:	2004      	movs	r0, #4
 80003a0:	f7ff ff2a 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 80003a4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80003a8:	2004      	movs	r0, #4
 80003aa:	f7ff ff25 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(DRDY_GPIO_Port, DRDY_Pin, LL_GPIO_PULL_NO);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2104      	movs	r1, #4
 80003b2:	4855      	ldr	r0, [pc, #340]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003b4:	f7ff ff7d 	bl	80002b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT3_GPIO_Port, MEMS_INT3_Pin, LL_GPIO_PULL_NO);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2110      	movs	r1, #16
 80003bc:	4852      	ldr	r0, [pc, #328]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003be:	f7ff ff78 	bl	80002b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT4_GPIO_Port, MEMS_INT4_Pin, LL_GPIO_PULL_NO);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2120      	movs	r1, #32
 80003c6:	4850      	ldr	r0, [pc, #320]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003c8:	f7ff ff73 	bl	80002b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_PULL_NO);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	484d      	ldr	r0, [pc, #308]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003d2:	f7ff ff6e 	bl	80002b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	484b      	ldr	r0, [pc, #300]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003dc:	f7ff ff69 	bl	80002b2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(DRDY_GPIO_Port, DRDY_Pin, LL_GPIO_MODE_INPUT);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4848      	ldr	r0, [pc, #288]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003e6:	f7ff ff35 	bl	8000254 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT3_GPIO_Port, MEMS_INT3_Pin, LL_GPIO_MODE_INPUT);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	4846      	ldr	r0, [pc, #280]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003f0:	f7ff ff30 	bl	8000254 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT4_GPIO_Port, MEMS_INT4_Pin, LL_GPIO_MODE_INPUT);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2120      	movs	r1, #32
 80003f8:	4843      	ldr	r0, [pc, #268]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80003fa:	f7ff ff2b 	bl	8000254 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT1_GPIO_Port, MEMS_INT1_Pin, LL_GPIO_MODE_INPUT);
 80003fe:	2200      	movs	r2, #0
 8000400:	2101      	movs	r1, #1
 8000402:	4841      	ldr	r0, [pc, #260]	; (8000508 <MX_GPIO_Init+0x1dc>)
 8000404:	f7ff ff26 	bl	8000254 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 8000408:	2200      	movs	r2, #0
 800040a:	2102      	movs	r1, #2
 800040c:	483e      	ldr	r0, [pc, #248]	; (8000508 <MX_GPIO_Init+0x1dc>)
 800040e:	f7ff ff21 	bl	8000254 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000412:	2304      	movs	r3, #4
 8000414:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000416:	2300      	movs	r3, #0
 8000418:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800041a:	2301      	movs	r3, #1
 800041c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000420:	2301      	movs	r3, #1
 8000422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000426:	2301      	movs	r3, #1
 8000428:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800042c:	f107 031c 	add.w	r3, r7, #28
 8000430:	4618      	mov	r0, r3
 8000432:	f000 ff19 	bl	8001268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000436:	2310      	movs	r3, #16
 8000438:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800043a:	2300      	movs	r3, #0
 800043c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800043e:	2301      	movs	r3, #1
 8000440:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000444:	2301      	movs	r3, #1
 8000446:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800044a:	2301      	movs	r3, #1
 800044c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000450:	f107 031c 	add.w	r3, r7, #28
 8000454:	4618      	mov	r0, r3
 8000456:	f000 ff07 	bl	8001268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800045a:	2320      	movs	r3, #32
 800045c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000462:	2301      	movs	r3, #1
 8000464:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000468:	2301      	movs	r3, #1
 800046a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800046e:	2301      	movs	r3, #1
 8000470:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000474:	f107 031c 	add.w	r3, r7, #28
 8000478:	4618      	mov	r0, r3
 800047a:	f000 fef5 	bl	8001268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800047e:	2301      	movs	r3, #1
 8000480:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000486:	2301      	movs	r3, #1
 8000488:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 800048c:	2301      	movs	r3, #1
 800048e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000492:	2301      	movs	r3, #1
 8000494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000498:	f107 031c 	add.w	r3, r7, #28
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fee3 	bl	8001268 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80004b0:	2301      	movs	r3, #1
 80004b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004b6:	2301      	movs	r3, #1
 80004b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004bc:	f107 031c 	add.w	r3, r7, #28
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fed1 	bl	8001268 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004c6:	f64f 7308 	movw	r3, #65288	; 0xff08
 80004ca:	607b      	str	r3, [r7, #4]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004cc:	2301      	movs	r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4619      	mov	r1, r3
 80004e0:	4809      	ldr	r0, [pc, #36]	; (8000508 <MX_GPIO_Init+0x1dc>)
 80004e2:	f001 f8b9 	bl	8001658 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B1_Pin;
 80004e6:	2301      	movs	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004ee:	2300      	movs	r3, #0
 80004f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4619      	mov	r1, r3
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f001 f8ad 	bl	8001658 <LL_GPIO_Init>

}
 80004fe:	bf00      	nop
 8000500:	3728      	adds	r7, #40	; 0x28
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	48001000 	.word	0x48001000
 800050c:	000f0001 	.word	0x000f0001
 8000510:	00f00001 	.word	0x00f00001

08000514 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000568:	f023 0306 	bic.w	r3, r3, #6
 800056c:	68b9      	ldr	r1, [r7, #8]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	430a      	orrs	r2, r1
 8000572:	431a      	orrs	r2, r3
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	60da      	str	r2, [r3, #12]
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	605a      	str	r2, [r3, #4]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <LL_AHB1_GRP1_EnableClock>:
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	4907      	ldr	r1, [pc, #28]	; (80005f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005e2:	68fb      	ldr	r3, [r7, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005fe:	69da      	ldr	r2, [r3, #28]
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4313      	orrs	r3, r2
 8000606:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <LL_APB1_GRP1_EnableClock+0x2c>)
 800060a:	69da      	ldr	r2, [r3, #28]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4013      	ands	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40021000 	.word	0x40021000

08000624 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08e      	sub	sp, #56	; 0x38
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
 800063a:	615a      	str	r2, [r3, #20]
 800063c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800064e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000652:	f7ff ffb7 	bl	80005c4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800065a:	2302      	movs	r3, #2
 800065c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000662:	2301      	movs	r3, #1
 8000664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000666:	2301      	movs	r3, #1
 8000668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800066a:	2304      	movs	r3, #4
 800066c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4619      	mov	r1, r3
 8000672:	4818      	ldr	r0, [pc, #96]	; (80006d4 <MX_I2C1_Init+0xb0>)
 8000674:	f000 fff0 	bl	8001658 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000678:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800067c:	f7ff ffba 	bl	80005f4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8000680:	4815      	ldr	r0, [pc, #84]	; (80006d8 <MX_I2C1_Init+0xb4>)
 8000682:	f7ff ff8f 	bl	80005a4 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8000686:	4814      	ldr	r0, [pc, #80]	; (80006d8 <MX_I2C1_Init+0xb4>)
 8000688:	f7ff ff7c 	bl	8000584 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800068c:	4812      	ldr	r0, [pc, #72]	; (80006d8 <MX_I2C1_Init+0xb4>)
 800068e:	f7ff ff51 	bl	8000534 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_I2C1_Init+0xb4>)
 8000694:	f7ff ff3e 	bl	8000514 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0xb8>)
 800069e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4807      	ldr	r0, [pc, #28]	; (80006d8 <MX_I2C1_Init+0xb4>)
 80006bc:	f001 f8df 	bl	800187e <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_I2C1_Init+0xb4>)
 80006c6:	f7ff ff45 	bl	8000554 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3738      	adds	r7, #56	; 0x38
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	48000400 	.word	0x48000400
 80006d8:	40005400 	.word	0x40005400
 80006dc:	2000090e 	.word	0x2000090e

080006e0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <LL_RCC_HSE_EnableBypass+0x1c>)
 80006ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <LL_RCC_HSE_Enable+0x1c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <LL_RCC_HSE_Enable+0x1c>)
 800070a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000

08000720 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <LL_RCC_HSE_IsReady+0x24>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800072c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000730:	bf0c      	ite	eq
 8000732:	2301      	moveq	r3, #1
 8000734:	2300      	movne	r3, #0
 8000736:	b2db      	uxtb	r3, r3
}
 8000738:	4618      	mov	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <LL_RCC_HSI_Enable+0x1c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <LL_RCC_HSI_Enable+0x1c>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6013      	str	r3, [r2, #0]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000

08000768 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_RCC_HSI_IsReady+0x20>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f003 0302 	and.w	r3, r3, #2
 8000774:	2b02      	cmp	r3, #2
 8000776:	bf0c      	ite	eq
 8000778:	2301      	moveq	r3, #1
 800077a:	2300      	movne	r3, #0
 800077c:	b2db      	uxtb	r3, r3
}
 800077e:	4618      	mov	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	40021000 	.word	0x40021000

0800078c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	4904      	ldr	r1, [pc, #16]	; (80007b4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80007a2:	4313      	orrs	r3, r2
 80007a4:	600b      	str	r3, [r1, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f023 0203 	bic.w	r2, r3, #3
 80007c8:	4904      	ldr	r1, [pc, #16]	; (80007dc <LL_RCC_SetSysClkSource+0x24>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	604b      	str	r3, [r1, #4]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <LL_RCC_GetSysClkSource+0x18>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	f003 030c 	and.w	r3, r3, #12
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <LL_RCC_SetAHBPrescaler+0x24>)
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <LL_RCC_SetAHBPrescaler+0x24>)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4313      	orrs	r3, r2
 8000812:	604b      	str	r3, [r1, #4]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40021000 	.word	0x40021000

08000824 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	604b      	str	r3, [r1, #4]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000

0800084c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800085c:	4904      	ldr	r1, [pc, #16]	; (8000870 <LL_RCC_SetAPB2Prescaler+0x24>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	604b      	str	r3, [r1, #4]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000

08000874 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LL_RCC_SetI2CClockSource+0x2c>)
 800087e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	0e1b      	lsrs	r3, r3, #24
 8000884:	43db      	mvns	r3, r3
 8000886:	401a      	ands	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800088e:	4904      	ldr	r1, [pc, #16]	; (80008a0 <LL_RCC_SetI2CClockSource+0x2c>)
 8000890:	4313      	orrs	r3, r2
 8000892:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <LL_RCC_SetUSBClockSource>:
  *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL
  *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <LL_RCC_SetUSBClockSource+0x24>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80008b4:	4904      	ldr	r1, [pc, #16]	; (80008c8 <LL_RCC_SetUSBClockSource+0x24>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	604b      	str	r3, [r1, #4]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_RCC_PLL_Enable+0x1c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <LL_RCC_PLL_Enable+0x1c>)
 80008d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <LL_RCC_PLL_IsReady+0x24>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008fc:	bf0c      	ite	eq
 80008fe:	2301      	moveq	r3, #1
 8000900:	2300      	movne	r3, #0
 8000902:	b2db      	uxtb	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800091e:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	430b      	orrs	r3, r1
 8000930:	4909      	ldr	r1, [pc, #36]	; (8000958 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000932:	4313      	orrs	r3, r2
 8000934:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000936:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800093a:	f023 020f 	bic.w	r2, r3, #15
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000946:	4313      	orrs	r3, r2
 8000948:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <LL_FLASH_SetLatency+0x24>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f023 0207 	bic.w	r2, r3, #7
 800096c:	4904      	ldr	r1, [pc, #16]	; (8000980 <LL_FLASH_SetLatency+0x24>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	600b      	str	r3, [r1, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40022000 	.word	0x40022000

08000984 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <LL_FLASH_GetLatency+0x18>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 0307 	and.w	r3, r3, #7
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40022000 	.word	0x40022000

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a4:	f000 f9a6 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a8:	f000 f812 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ac:	f7ff fcbe 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009b0:	f7ff fe38 	bl	8000624 <MX_I2C1_Init>
  MX_SPI1_Init();
 80009b4:	f000 f8be 	bl	8000b34 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80009b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <main+0x2c>)
 80009be:	f000 fb08 	bl	8000fd2 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80009c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009c6:	f000 f9fb 	bl	8000dc0 <HAL_Delay>
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80009ca:	e7f5      	b.n	80009b8 <main+0x18>
 80009cc:	48001000 	.word	0x48001000

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff ffc1 	bl	800095c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 80009da:	bf00      	nop
 80009dc:	f7ff ffd2 	bl	8000984 <LL_FLASH_GetLatency>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1fa      	bne.n	80009dc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_EnableBypass();
 80009e6:	f7ff fe7b 	bl	80006e0 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 80009ea:	f7ff fe89 	bl	8000700 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80009ee:	bf00      	nop
 80009f0:	f7ff fe96 	bl	8000720 <LL_RCC_HSE_IsReady>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d1fa      	bne.n	80009f0 <SystemClock_Config+0x20>
  {

  }
  LL_RCC_HSI_Enable();
 80009fa:	f7ff fea5 	bl	8000748 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80009fe:	bf00      	nop
 8000a00:	f7ff feb2 	bl	8000768 <LL_RCC_HSI_IsReady>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d1fa      	bne.n	8000a00 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000a0a:	2010      	movs	r0, #16
 8000a0c:	f7ff febe 	bl	800078c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_6);
 8000a10:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000a14:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a18:	f7ff ff7c 	bl	8000914 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a1c:	f7ff ff56 	bl	80008cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a20:	bf00      	nop
 8000a22:	f7ff ff63 	bl	80008ec <LL_RCC_PLL_IsReady>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d1fa      	bne.n	8000a22 <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f7ff fee5 	bl	80007fc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000a32:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000a36:	f7ff fef5 	bl	8000824 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ff06 	bl	800084c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a40:	2002      	movs	r0, #2
 8000a42:	f7ff feb9 	bl	80007b8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a46:	bf00      	nop
 8000a48:	f7ff feca 	bl	80007e0 <LL_RCC_GetSysClkSource>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d1fa      	bne.n	8000a48 <SystemClock_Config+0x78>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8000a52:	480a      	ldr	r0, [pc, #40]	; (8000a7c <SystemClock_Config+0xac>)
 8000a54:	f000 ffe4 	bl	8001a20 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f961 	bl	8000d20 <HAL_InitTick>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a64:	f000 f80c 	bl	8000a80 <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000a68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a6c:	f7ff ff02 	bl	8000874 <LL_RCC_SetI2CClockSource>
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL);
 8000a70:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a74:	f7ff ff16 	bl	80008a4 <LL_RCC_SetUSBClockSource>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	02dc6c00 	.word	0x02dc6c00

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <LL_AHB1_GRP1_EnableClock>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a96:	695a      	ldr	r2, [r3, #20]
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000aa2:	695a      	ldr	r2, [r3, #20]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000

08000abc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ac6:	699a      	ldr	r2, [r3, #24]
 8000ac8:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ada:	68fb      	ldr	r3, [r7, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40021000 	.word	0x40021000

08000aec <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f023 0210 	bic.w	r2, r3, #16
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f043 0208 	orr.w	r2, r3, #8
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b090      	sub	sp, #64	; 0x40
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000b3a:	f107 0318 	add.w	r3, r7, #24
 8000b3e:	2228      	movs	r2, #40	; 0x28
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 ffa0 	bl	8001a88 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000b58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b5c:	f7ff ffae 	bl	8000abc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b60:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000b64:	f7ff ff92 	bl	8000a8c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b68:	23e0      	movs	r3, #224	; 0xe0
 8000b6a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000b7c:	2305      	movs	r3, #5
 8000b7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fd66 	bl	8001658 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000b90:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b94:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8000b96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b9a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000baa:	2308      	movs	r3, #8
 8000bac:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000bba:	f107 0318 	add.w	r3, r7, #24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_SPI1_Init+0xa8>)
 8000bc2:	f000 fece 	bl	8001962 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_SPI1_Init+0xa8>)
 8000bca:	f7ff ff8f 	bl	8000aec <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8000bce:	4803      	ldr	r0, [pc, #12]	; (8000bdc <MX_SPI1_Init+0xa8>)
 8000bd0:	f7ff ff9f 	bl	8000b12 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bd4:	bf00      	nop
 8000bd6:	3740      	adds	r7, #64	; 0x40
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013000 	.word	0x40013000

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c16:	2007      	movs	r0, #7
 8000c18:	f000 f9a8 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <BusFault_Handler+0x4>

08000c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <UsageFault_Handler+0x4>

08000c46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c74:	f000 f884 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0b      	ldr	r4, [pc, #44]	; (8000cec <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cca:	f7ff ffd7 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cce:	f000 feb7 	bl	8001a40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fe65 	bl	80009a0 <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	08001ab8 	.word	0x08001ab8
  ldr r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cec:	2000002c 	.word	0x2000002c

08000cf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_2_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x28>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x28>)
 8000cfe:	f043 0310 	orr.w	r3, r3, #16
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f931 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff ff66 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40022000 	.word	0x40022000

08000d20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f911 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000028 	.word	0x20000028

08000da8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000028 	.word	0x20000028

08000dc0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff5c 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb0 	bl	8000f28 <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	041a      	lsls	r2, r3, #16
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
	...

08001008 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <LL_EXTI_EnableIT_0_31+0x20>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4904      	ldr	r1, [pc, #16]	; (8001028 <LL_EXTI_EnableIT_0_31+0x20>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	600b      	str	r3, [r1, #0]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40010400 	.word	0x40010400

0800102c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <LL_EXTI_EnableIT_32_63+0x20>)
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <LL_EXTI_EnableIT_32_63+0x20>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	620b      	str	r3, [r1, #32]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40010400 	.word	0x40010400

08001050 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LL_EXTI_DisableIT_0_31+0x24>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	43db      	mvns	r3, r3
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_EXTI_DisableIT_0_31+0x24>)
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40010400 	.word	0x40010400

08001078 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <LL_EXTI_DisableIT_32_63+0x24>)
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	43db      	mvns	r3, r3
 8001088:	4904      	ldr	r1, [pc, #16]	; (800109c <LL_EXTI_DisableIT_32_63+0x24>)
 800108a:	4013      	ands	r3, r2
 800108c:	620b      	str	r3, [r1, #32]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40010400 	.word	0x40010400

080010a0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	4904      	ldr	r1, [pc, #16]	; (80010c0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]

}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	40010400 	.word	0x40010400

080010c4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80010ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d0:	4904      	ldr	r1, [pc, #16]	; (80010e4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40010400 	.word	0x40010400

080010e8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <LL_EXTI_DisableEvent_0_31+0x24>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4904      	ldr	r1, [pc, #16]	; (800110c <LL_EXTI_DisableEvent_0_31+0x24>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	604b      	str	r3, [r1, #4]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40010400 	.word	0x40010400

08001110 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_DisableEvent_32_63+0x24>)
 800111a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	43db      	mvns	r3, r3
 8001120:	4904      	ldr	r1, [pc, #16]	; (8001134 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001122:	4013      	ands	r3, r2
 8001124:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40010400 	.word	0x40010400

08001138 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	608b      	str	r3, [r1, #8]

}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40010400 	.word	0x40010400

0800115c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001166:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40010400 	.word	0x40010400

08001180 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	43db      	mvns	r3, r3
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001192:	4013      	ands	r3, r2
 8001194:	608b      	str	r3, [r1, #8]

}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40010400 	.word	0x40010400

080011a8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80011b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40010400 	.word	0x40010400

080011d0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40010400 	.word	0x40010400

080011f4 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80011fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40010400 	.word	0x40010400

08001218 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	43db      	mvns	r3, r3
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800122a:	4013      	ands	r3, r2
 800122c:	60cb      	str	r3, [r1, #12]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40010400 	.word	0x40010400

08001240 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800124a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	43db      	mvns	r3, r3
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001252:	4013      	ands	r3, r2
 8001254:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40010400 	.word	0x40010400

08001268 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	7a1b      	ldrb	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80cd 	beq.w	8001418 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d061      	beq.n	800134a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7a5b      	ldrb	r3, [r3, #9]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d01c      	beq.n	80012c8 <LL_EXTI_Init+0x60>
 800128e:	2b02      	cmp	r3, #2
 8001290:	dc25      	bgt.n	80012de <LL_EXTI_Init+0x76>
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <LL_EXTI_Init+0x34>
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00b      	beq.n	80012b2 <LL_EXTI_Init+0x4a>
 800129a:	e020      	b.n	80012de <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff21 	bl	80010e8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff feac 	bl	8001008 <LL_EXTI_EnableIT_0_31>
          break;
 80012b0:	e018      	b.n	80012e4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff feca 	bl	8001050 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff feed 	bl	80010a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80012c6:	e00d      	b.n	80012e4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe9b 	bl	8001008 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fee2 	bl	80010a0 <LL_EXTI_EnableEvent_0_31>
          break;
 80012dc:	e002      	b.n	80012e4 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
          break;
 80012e2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7a9b      	ldrb	r3, [r3, #10]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d02e      	beq.n	800134a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7a9b      	ldrb	r3, [r3, #10]
 80012f0:	2b03      	cmp	r3, #3
 80012f2:	d01c      	beq.n	800132e <LL_EXTI_Init+0xc6>
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	dc25      	bgt.n	8001344 <LL_EXTI_Init+0xdc>
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d002      	beq.n	8001302 <LL_EXTI_Init+0x9a>
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d00b      	beq.n	8001318 <LL_EXTI_Init+0xb0>
 8001300:	e020      	b.n	8001344 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff86 	bl	8001218 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff11 	bl	8001138 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001316:	e019      	b.n	800134c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff2f 	bl	8001180 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff52 	bl	80011d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800132c:	e00e      	b.n	800134c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff00 	bl	8001138 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff47 	bl	80011d0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001342:	e003      	b.n	800134c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
            break;
 8001348:	e000      	b.n	800134c <LL_EXTI_Init+0xe4>
        }
      }
 800134a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d076      	beq.n	8001442 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7a5b      	ldrb	r3, [r3, #9]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d01c      	beq.n	8001396 <LL_EXTI_Init+0x12e>
 800135c:	2b02      	cmp	r3, #2
 800135e:	dc25      	bgt.n	80013ac <LL_EXTI_Init+0x144>
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <LL_EXTI_Init+0x102>
 8001364:	2b01      	cmp	r3, #1
 8001366:	d00b      	beq.n	8001380 <LL_EXTI_Init+0x118>
 8001368:	e020      	b.n	80013ac <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fece 	bl	8001110 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe57 	bl	800102c <LL_EXTI_EnableIT_32_63>
          break;
 800137e:	e018      	b.n	80013b2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe77 	bl	8001078 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fe98 	bl	80010c4 <LL_EXTI_EnableEvent_32_63>
          break;
 8001394:	e00d      	b.n	80013b2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe46 	bl	800102c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe8d 	bl	80010c4 <LL_EXTI_EnableEvent_32_63>
          break;
 80013aa:	e002      	b.n	80013b2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
          break;
 80013b0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7a9b      	ldrb	r3, [r3, #10]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d043      	beq.n	8001442 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a9b      	ldrb	r3, [r3, #10]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d01c      	beq.n	80013fc <LL_EXTI_Init+0x194>
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	dc25      	bgt.n	8001412 <LL_EXTI_Init+0x1aa>
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d002      	beq.n	80013d0 <LL_EXTI_Init+0x168>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d00b      	beq.n	80013e6 <LL_EXTI_Init+0x17e>
 80013ce:	e020      	b.n	8001412 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff33 	bl	8001240 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff febc 	bl	800115c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80013e4:	e02e      	b.n	8001444 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fedc 	bl	80011a8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fefd 	bl	80011f4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80013fa:	e023      	b.n	8001444 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff feab 	bl	800115c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fef2 	bl	80011f4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001410:	e018      	b.n	8001444 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
            break;
 8001416:	e015      	b.n	8001444 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe17 	bl	8001050 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fe5e 	bl	80010e8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fe21 	bl	8001078 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fe68 	bl	8001110 <LL_EXTI_DisableEvent_32_63>
 8001440:	e000      	b.n	8001444 <LL_EXTI_Init+0x1dc>
      }
 8001442:	bf00      	nop
#endif
  }
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <LL_GPIO_SetPinMode>:
{
 800144e:	b480      	push	{r7}
 8001450:	b089      	sub	sp, #36	; 0x24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	613b      	str	r3, [r7, #16]
  return result;
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	fab3 f383 	clz	r3, r3
 8001470:	b2db      	uxtb	r3, r3
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2103      	movs	r1, #3
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	401a      	ands	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	61bb      	str	r3, [r7, #24]
  return result;
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	431a      	orrs	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	3724      	adds	r7, #36	; 0x24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_GPIO_SetPinOutputType>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	43db      	mvns	r3, r3
 80014c0:	401a      	ands	r2, r3
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_GPIO_SetPinSpeed>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	613b      	str	r3, [r7, #16]
  return result;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2103      	movs	r1, #3
 8001504:	fa01 f303 	lsl.w	r3, r1, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	401a      	ands	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	61bb      	str	r3, [r7, #24]
  return result;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
 8001528:	431a      	orrs	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	609a      	str	r2, [r3, #8]
}
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_GPIO_SetPinPull>:
{
 800153a:	b480      	push	{r7}
 800153c:	b089      	sub	sp, #36	; 0x24
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	613b      	str	r3, [r7, #16]
  return result;
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	fab3 f383 	clz	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2103      	movs	r1, #3
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	61bb      	str	r3, [r7, #24]
  return result;
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	fab3 f383 	clz	r3, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	431a      	orrs	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	60da      	str	r2, [r3, #12]
}
 800158c:	bf00      	nop
 800158e:	3724      	adds	r7, #36	; 0x24
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_GPIO_SetAFPin_0_7>:
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a1a      	ldr	r2, [r3, #32]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fa93 f3a3 	rbit	r3, r3
 80015b2:	613b      	str	r3, [r7, #16]
  return result;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fab3 f383 	clz	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	210f      	movs	r1, #15
 80015c0:	fa01 f303 	lsl.w	r3, r1, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	401a      	ands	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	fa93 f3a3 	rbit	r3, r3
 80015d2:	61bb      	str	r3, [r7, #24]
  return result;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	621a      	str	r2, [r3, #32]
}
 80015ea:	bf00      	nop
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_GPIO_SetAFPin_8_15>:
{
 80015f6:	b480      	push	{r7}
 80015f8:	b089      	sub	sp, #36	; 0x24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	613b      	str	r3, [r7, #16]
  return result;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	210f      	movs	r1, #15
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	61bb      	str	r3, [r7, #24]
  return result;
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	fab3 f383 	clz	r3, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	431a      	orrs	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800164c:	bf00      	nop
 800164e:	3724      	adds	r7, #36	; 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	613b      	str	r3, [r7, #16]
  return result;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800167a:	e051      	b.n	8001720 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d043      	beq.n	800171a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d003      	beq.n	80016a2 <LL_GPIO_Init+0x4a>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d10e      	bne.n	80016c0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	461a      	mov	r2, r3
 80016a8:	69b9      	ldr	r1, [r7, #24]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ff16 	bl	80014dc <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	461a      	mov	r2, r3
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fef6 	bl	80014ac <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	461a      	mov	r2, r3
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ff36 	bl	800153a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d11a      	bne.n	800170c <LL_GPIO_Init+0xb4>
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	60bb      	str	r3, [r7, #8]
  return result;
 80016e2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d807      	bhi.n	80016fe <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	461a      	mov	r2, r3
 80016f4:	69b9      	ldr	r1, [r7, #24]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff4e 	bl	8001598 <LL_GPIO_SetAFPin_0_7>
 80016fc:	e006      	b.n	800170c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	461a      	mov	r2, r3
 8001704:	69b9      	ldr	r1, [r7, #24]
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff75 	bl	80015f6 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	461a      	mov	r2, r3
 8001712:	69b9      	ldr	r1, [r7, #24]
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff fe9a 	bl	800144e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	fa22 f303 	lsr.w	r3, r2, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1a6      	bne.n	800167c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3720      	adds	r7, #32
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <LL_I2C_Enable>:
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f043 0201 	orr.w	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	601a      	str	r2, [r3, #0]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_I2C_Disable>:
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 0201 	bic.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	601a      	str	r2, [r3, #0]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_I2C_ConfigFilters>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	0219      	lsls	r1, r3, #8
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	430b      	orrs	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <LL_I2C_SetOwnAddress1>:
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	609a      	str	r2, [r3, #8]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_I2C_EnableOwnAddress1>:
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	609a      	str	r2, [r3, #8]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_I2C_DisableOwnAddress1>:
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	609a      	str	r2, [r3, #8]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <LL_I2C_SetTiming>:
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	611a      	str	r2, [r3, #16]
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_I2C_SetMode>:
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	601a      	str	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff65 	bl	8001758 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	461a      	mov	r2, r3
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff6d 	bl	8001778 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffb6 	bl	8001816 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ff44 	bl	8001738 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffa0 	bl	80017f6 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6919      	ldr	r1, [r3, #16]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	461a      	mov	r2, r3
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff70 	bl	80017a6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff81 	bl	80017d6 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa9 	bl	8001832 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	4619      	mov	r1, r3
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ffb6 	bl	8001858 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <LL_SPI_IsEnabled>:
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b40      	cmp	r3, #64	; 0x40
 8001908:	d101      	bne.n	800190e <LL_SPI_IsEnabled+0x18>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_SPI_IsEnabled+0x1a>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_SPI_SetRxFIFOThreshold>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_SPI_SetCRCPolynomial>:
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff ffc0 	bl	80018f6 <LL_SPI_IsEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d145      	bne.n	8001a08 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001984:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	6811      	ldr	r1, [r2, #0]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	6852      	ldr	r2, [r2, #4]
 8001990:	4311      	orrs	r1, r2
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	4311      	orrs	r1, r2
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	6912      	ldr	r2, [r2, #16]
 800199c:	4311      	orrs	r1, r2
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	6952      	ldr	r2, [r2, #20]
 80019a2:	4311      	orrs	r1, r2
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	6992      	ldr	r2, [r2, #24]
 80019a8:	4311      	orrs	r1, r2
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	69d2      	ldr	r2, [r2, #28]
 80019ae:	4311      	orrs	r1, r2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	6a12      	ldr	r2, [r2, #32]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	6891      	ldr	r1, [r2, #8]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	6952      	ldr	r2, [r2, #20]
 80019d0:	0c12      	lsrs	r2, r2, #16
 80019d2:	430a      	orrs	r2, r1
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e2:	d204      	bcs.n	80019ee <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80019e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff97 	bl	800191c <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f6:	d105      	bne.n	8001a04 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff9f 	bl	8001942 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <LL_SetSystemCoreClock+0x1c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000

08001a40 <__libc_init_array>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4d0d      	ldr	r5, [pc, #52]	; (8001a78 <__libc_init_array+0x38>)
 8001a44:	4c0d      	ldr	r4, [pc, #52]	; (8001a7c <__libc_init_array+0x3c>)
 8001a46:	1b64      	subs	r4, r4, r5
 8001a48:	10a4      	asrs	r4, r4, #2
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	42a6      	cmp	r6, r4
 8001a4e:	d109      	bne.n	8001a64 <__libc_init_array+0x24>
 8001a50:	4d0b      	ldr	r5, [pc, #44]	; (8001a80 <__libc_init_array+0x40>)
 8001a52:	4c0c      	ldr	r4, [pc, #48]	; (8001a84 <__libc_init_array+0x44>)
 8001a54:	f000 f820 	bl	8001a98 <_init>
 8001a58:	1b64      	subs	r4, r4, r5
 8001a5a:	10a4      	asrs	r4, r4, #2
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	42a6      	cmp	r6, r4
 8001a60:	d105      	bne.n	8001a6e <__libc_init_array+0x2e>
 8001a62:	bd70      	pop	{r4, r5, r6, pc}
 8001a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a68:	4798      	blx	r3
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	e7ee      	b.n	8001a4c <__libc_init_array+0xc>
 8001a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a72:	4798      	blx	r3
 8001a74:	3601      	adds	r6, #1
 8001a76:	e7f2      	b.n	8001a5e <__libc_init_array+0x1e>
 8001a78:	08001ab0 	.word	0x08001ab0
 8001a7c:	08001ab0 	.word	0x08001ab0
 8001a80:	08001ab0 	.word	0x08001ab0
 8001a84:	08001ab4 	.word	0x08001ab4

08001a88 <memset>:
 8001a88:	4402      	add	r2, r0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d100      	bne.n	8001a92 <memset+0xa>
 8001a90:	4770      	bx	lr
 8001a92:	f803 1b01 	strb.w	r1, [r3], #1
 8001a96:	e7f9      	b.n	8001a8c <memset+0x4>

08001a98 <_init>:
 8001a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9a:	bf00      	nop
 8001a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a9e:	bc08      	pop	{r3}
 8001aa0:	469e      	mov	lr, r3
 8001aa2:	4770      	bx	lr

08001aa4 <_fini>:
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	bf00      	nop
 8001aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aaa:	bc08      	pop	{r3}
 8001aac:	469e      	mov	lr, r3
 8001aae:	4770      	bx	lr
